*mapswap.txt* swap keymap temporarily

Version: 0.1
Author : t9md <taqumd@gmail.com>
GitHub : https://github.com/t9md/vim-mapswap
==============================================================================
CONTENTS					*mapswap-contents*

Introduction				    |mapswap-introduction|
Mapping					    |mapswap-mapping|
Commands				    |mapswap-commands|
Variables				    |mapswap-variables|
Functions				    |mapswap-functions|
Configuration Example			    |mapswap-example|
Use Case				    |mapswap-usecase|
Practice				    |mapswap-practice|
Bug					    |mapswap-bug|
Todo					    |mapswap-todo|
Changelog				    |mapswap-changelog|

==============================================================================
INTRODUCTION					*mapswap-introduction*

This is very BETA stage, a lot of limitation and bugs.

This plugin is inspired a blog post by rubykichi(Emacs' wizard).
In this blog he introduced view-mode to save your weak pinky.
rubikichi.
http://d.hatena.ne.jp/rubikitch/20081104/1225745862

Since we spend more time to reading 'code' than editing 'code'.
So to save your weak pinky, this plugin helps you temporarily swap keymap and 
restore to original keymap.

Use case:~
When you read source code, you temporarily swap keymap and move page around
with |u| ,|d| ,|f|, |b| instead of <C-u>, <C-d>, <C-f> , <C-b>

==============================================================================
MAPPINGS					*mapswap-mappings*

n   <Plug>(mapswap-dump)
	  Dump mapswap object for debugging.

==============================================================================
COMMANDS						*mapswap-commands*


==============================================================================
VARIABLES						*mapswap-variables*

*g:mapswap_table*
	Dicationary, which key is a function that set keymap.
	see |mapswap-example|

==============================================================================
FUNCTIONS						*mapswap-functions*

								*mapswap#_map()*
mapswap#_map({map}, {mode}, {options}, {lhs}, {rhs})
	{mode} is |String|. sequence of following chars.
		c => Command-line mode
		i => Insert mode
		n => Normal mode
		s => Select mode only
		v => Visual mode and Select mode
		x => Visual mode only
	{options} is |String|. sequence of following chars.
		b => <buffer>
		e => <expr>
		s => <silent>
		u => <unique>
		n => <nowait> usefull it's conflict global keymap
		S => <script>
		l => <special>
	{lhs} is |String|, use '<CR>' form instead of "\<CR>".
	{rhs} is |String|, use '<CR>' form instead of "\<CR>".
	{rhs} is |String|, use

								*mapswap#map()*
mapswap#map({mode}, {options}, {lhs}, {rhs})
	Wrapper for mapswap#_map('map', ...)

							*mapswap#noremap()*
mapswap#noremap({mode}, {options}, {lhs}, {rhs})
	Wrapper for mapswap#_map('noremap', ...)

mapswap#cmap({options}, {lhs}, {rhs})			    *mapswap#cmap()*
mapswap#nmap({options}, {lhs}, {rhs})			    *mapswap#nmap()*
mapswap#smap({options}, {lhs}, {rhs})			    *mapswap#smap()*
mapswap#vmap({options}, {lhs}, {rhs})			    *mapswap#vmap()*
mapswap#xmap({options}, {lhs}, {rhs})			    *mapswap#xmap()*
	Wrapper for mapswap#_map('{X}map', ...)

mapswap#cnoremap({options}, {lhs}, {rhs})		*mapswap#cnoremap()*
mapswap#nnoremap({options}, {lhs}, {rhs})		*mapswap#nnoremap()*
mapswap#snoremap({options}, {lhs}, {rhs})		*mapswap#snoremap()*
mapswap#vnoremap({options}, {lhs}, {rhs})		*mapswap#vnoremap()*
mapswap#xnoremap({options}, {lhs}, {rhs})		*mapswap#xnoremap()*
	Wrapper for mapswap#_map('{X}noremap', ...)

							*mapswap#statusline()*
mapswap#statusline()
	Return status string with mapping table name
	which is useful to know whether you are in swapped state or not.

							*mapswap#setup()*
mapswap#setup()
	Setup virtual keymaps for convenience.
	Calling this function is not mandatory.
	This function should be called after all member functions of
	|g:mapswap_table| are defined.
	Since this function simply set following virtual keymap.
	'<Plug>(mapswap-{name}) :<C-u>call mapswap#swap('{name}')<CR>
	Where {name} is the key name of g:mapswap_table
>
	let mapswap_table = {}
	function! mapswap_table.foo()
	  call mapswap#noremap('n', '', 'a', ':echo "foo"<CR>')
	endfunction
	function! mapswap_table.bar()
	  call mapswap#noremap('n', '', 'a', ':echo "bar"<CR>')
	endfunction
	call mapswap#setup()

	nmap ,f <Plug>(mapswap-foo)
	nmap ,b <Plug>(mapswap-bar)
<
	By calling |mapswap#setup()| you can use '<Plug>(mapswap-foo)' and
	'<Plug>(mapswap-bar)'.

	See also |mapswap-example|.

==============================================================================
CONFIGURATION EXAMPLE				    *mapswap-example*

set in your '.vimrc'
>
	" you can swap keymap temporarily with '<F9>' to save your pinky!
	let mapswap_table = {}
	function! mapswap_table.view()
	  call mapswap#noremap('n' , '' , 'f'	    , '<C-f>')
	  call mapswap#noremap('n' , '' , 'b'	    , '<C-b>')
	  call mapswap#noremap('n' , '' , 'u'	    , '<C-u>')

	  "second 'n' represent <nowait>. its avoid my global surround-vim mapping wait another key
	  call mapswap#noremap('n' , 'n' , 'd'	     , '<C-d>')
	  call mapswap#noremap('n' , '' , '<CR>'    , '<C-]>')
	  call mapswap#noremap('n' , '' , '<BS>'    , '<C-t>')
	  call mapswap#noremap('n' , 'n' , '<Space>' , '<C-d>')

	  " you need #map for <Plug> virtual keymap
	  call	   mapswap#map('n' , '' , 't'	    , '<Plug>(quickhl-tag-toggle)')
	  call	   mapswap#map('n' , '' , 'a'	    , '<Plug>(altr-forward)')
	endfunction
	call mapswap#setup()
	nmap <F9> <Plug>(mapswap-view)
	nmap <S-F9> <Plug>(mapswap-dump)
<
==============================================================================
BUG							    *mapswap-bug*

Here a lot of bug and limitation.

==============================================================================
TODO							    *mapswap-todo*

Support all <expr>,  <buffer>, <silent> like so.
Need check to several type of keymap surely restored.

==============================================================================
CHANGELOG						*mapswap-changelog*
2013-10-16:
	- add |mapswap#setup()| for convenience.
2013-10-17: v0.1
	- Now support enough keymap variation!
2013-10-16:
	- initial release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
